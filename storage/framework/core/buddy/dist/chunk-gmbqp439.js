// @bun
import{Od as I,Pd as z,Qd as R,Td as v,Ud as A}from"./chunk-0gcz8bd6.js";import"./chunk-jpw6wb6x.js";import{Zd as oe}from"./chunk-5b5bjkxb.js";import{_d as u}from"./chunk-mp45a05d.js";import{ae as S,fe as D}from"./chunk-1krazvx7.js";var T=S(u(),1);var H=(e)=>e&&(typeof e.sso_start_url==="string"||typeof e.sso_account_id==="string"||typeof e.sso_session==="string"||typeof e.sso_region==="string"||typeof e.sso_role_name==="string");var F=S(oe(),1);var x=S(u(),1);var U=300000,h="To refresh this SSO session run 'aws sso login' with the corresponding profile.";var q=async(e,s={})=>{let{SSOOIDCClient:o}=await import("./chunk-c36q3940.js");return new o(Object.assign({},s.clientConfig??{},{region:e??s.clientConfig?.region,logger:s.clientConfig?.logger??s.parentClientConfig?.logger}))};var W=async(e,s,o={})=>{let{CreateTokenCommand:i}=await import("./chunk-c36q3940.js");return(await q(s,o)).send(new i({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))};var j=S(u(),1);var $=(e)=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new j.TokenProviderError(`Token is expired. ${h}`,!1)};var X=S(u(),1);var g=(e,s,o=!1)=>{if(typeof s==="undefined")throw new X.TokenProviderError(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${h}`,!1)};import{promises as Z}from"fs";var{writeFile:ee}=Z,J=(e,s)=>{let o=z(e),i=JSON.stringify(s,null,2);return ee(o,i)};var V=new Date(0),Y=(e={})=>async({callerClientConfig:s}={})=>{let o={...e,parentClientConfig:{...s,...e.parentClientConfig}};o.logger?.debug("@aws-sdk/token-providers - fromSso");let i=await A(o),r=I({profile:o.profile??s?.profile}),f=i[r];if(!f)throw new x.TokenProviderError(`Profile '${r}' could not be found in shared credentials file.`,!1);else if(!f.sso_session)throw new x.TokenProviderError(`Profile '${r}' is missing required property 'sso_session'.`);let l=f.sso_session,a=(await v(o))[l];if(!a)throw new x.TokenProviderError(`Sso session '${l}' could not be found in shared credentials file.`,!1);for(let n of["sso_start_url","sso_region"])if(!a[n])throw new x.TokenProviderError(`Sso session '${l}' is missing required property '${n}'.`,!1);let{sso_start_url:w,sso_region:t}=a,c;try{c=await R(l)}catch(n){throw new x.TokenProviderError(`The SSO session token associated with profile=${r} was not found or is invalid. ${h}`,!1)}g("accessToken",c.accessToken),g("expiresAt",c.expiresAt);let{accessToken:E,expiresAt:O}=c,p={token:E,expiration:new Date(O)};if(p.expiration.getTime()-Date.now()>U)return p;if(Date.now()-V.getTime()<30000)return $(p),p;g("clientId",c.clientId,!0),g("clientSecret",c.clientSecret,!0),g("refreshToken",c.refreshToken,!0);try{V.setTime(Date.now());let n=await W(c,t,o);g("accessToken",n.accessToken),g("expiresIn",n.expiresIn);let _=new Date(Date.now()+n.expiresIn*1000);try{await J(l,{...c,accessToken:n.accessToken,expiresAt:_.toISOString(),refreshToken:n.refreshToken})}catch(m){}return{token:n.accessToken,expiration:_}}catch(n){return $(p),p}};var k=S(u(),1);var N=!1,L=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:o,ssoRegion:i,ssoRoleName:r,ssoClient:f,clientConfig:l,parentClientConfig:y,profile:a,logger:w})=>{let t,c="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{let d=await Y({profile:a})();t={accessToken:d.token,expiresAt:new Date(d.expiration).toISOString()}}catch(d){throw new k.CredentialsProviderError(d.message,{tryNextLink:N,logger:w})}else try{t=await R(e)}catch(d){throw new k.CredentialsProviderError("The SSO session associated with this profile is invalid. To refresh this SSO session run aws sso login with the corresponding profile.",{tryNextLink:N,logger:w})}if(new Date(t.expiresAt).getTime()-Date.now()<=0)throw new k.CredentialsProviderError("The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile.",{tryNextLink:N,logger:w});let{accessToken:E}=t,{SSOClient:O,GetRoleCredentialsCommand:p}=await import("./chunk-yg67ngpg.js"),n=f||new O(Object.assign({},l??{},{logger:l?.logger??y?.logger,region:l?.region??i})),_;try{_=await n.send(new p({accountId:o,roleName:r,accessToken:E}))}catch(d){throw new k.CredentialsProviderError(d,{tryNextLink:N,logger:w})}let{roleCredentials:{accessKeyId:m,secretAccessKey:C,sessionToken:M,expiration:G,credentialScope:K,accountId:b}={}}=_;if(!m||!C||!M||!G)throw new k.CredentialsProviderError("SSO returns an invalid temporary credential.",{tryNextLink:N,logger:w});let P={accessKeyId:m,secretAccessKey:C,sessionToken:M,expiration:new Date(G),...K&&{credentialScope:K},...b&&{accountId:b}};if(s)F.setCredentialFeature(P,"CREDENTIALS_SSO","s");else F.setCredentialFeature(P,"CREDENTIALS_SSO_LEGACY","u");return P};var B=S(u(),1),Q=(e,s)=>{let{sso_start_url:o,sso_account_id:i,sso_region:r,sso_role_name:f}=e;if(!o||!i||!r||!f)throw new B.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e};var Re=(e={})=>async({callerClientConfig:s}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:o,ssoAccountId:i,ssoRegion:r,ssoRoleName:f,ssoSession:l}=e,{ssoClient:y}=e,a=I({profile:e.profile??s?.profile});if(!o&&!i&&!r&&!f&&!l){let t=(await A(e))[a];if(!t)throw new T.CredentialsProviderError(`Profile ${a} was not found.`,{logger:e.logger});if(!H(t))throw new T.CredentialsProviderError(`Profile ${a} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let m=(await v(e))[t.sso_session],C=` configurations in profile ${a} and sso-session ${t.sso_session}`;if(r&&r!==m.sso_region)throw new T.CredentialsProviderError("Conflicting SSO region"+C,{tryNextLink:!1,logger:e.logger});if(o&&o!==m.sso_start_url)throw new T.CredentialsProviderError("Conflicting SSO start_url"+C,{tryNextLink:!1,logger:e.logger});t.sso_region=m.sso_region,t.sso_start_url=m.sso_start_url}let{sso_start_url:c,sso_account_id:E,sso_region:O,sso_role_name:p,sso_session:n}=Q(t,e.logger);return L({ssoStartUrl:c,ssoSession:n,ssoAccountId:E,ssoRegion:O,ssoRoleName:p,ssoClient:y,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:a})}else if(!o||!i||!r||!f)throw new T.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});else return L({ssoStartUrl:o,ssoSession:l,ssoAccountId:i,ssoRegion:r,ssoRoleName:f,ssoClient:y,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:a})};export{Q as validateSsoProfile,H as isSsoProfile,Re as fromSSO};
