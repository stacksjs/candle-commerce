// @bun
import{Sd as C,Td as q,Ud as N,Xd as I,Yd as R}from"./chunk-q9cxybaw.js";import"./chunk-19q2jx2t.js";import{ce as a,de as m}from"./chunk-v97r5n5v.js";import{he as Y}from"./chunk-jvc6fwyc.js";import{je as O,oe as A}from"./chunk-2g57f3kb.js";var K=(e)=>e&&(typeof e.sso_start_url==="string"||typeof e.sso_account_id==="string"||typeof e.sso_session==="string"||typeof e.sso_region==="string"||typeof e.sso_role_name==="string");var D=O(Y(),1);var b=300000,u="To refresh this SSO session run 'aws sso login' with the corresponding profile.";var H=async(e,s={})=>{let{SSOOIDCClient:o}=await import("./chunk-tbjj5929.js");return new o(Object.assign({},s.clientConfig??{},{region:e??s.clientConfig?.region,logger:s.clientConfig?.logger??s.parentClientConfig?.logger}))};var U=async(e,s,o={})=>{let{CreateTokenCommand:i}=await import("./chunk-tbjj5929.js");return(await H(s,o)).send(new i({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))};var P=(e)=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new m(`Token is expired. ${u}`,!1)};var w=(e,s,o=!1)=>{if(typeof s==="undefined")throw new m(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${u}`,!1)};import{promises as J}from"fs";var{writeFile:V}=J,W=(e,s)=>{let o=q(e),i=JSON.stringify(s,null,2);return V(o,i)};var j=new Date(0),X=(e={})=>async({callerClientConfig:s}={})=>{let o={...e,parentClientConfig:{...s,...e.parentClientConfig}};o.logger?.debug("@aws-sdk/token-providers - fromSso");let i=await R(o),r=C({profile:o.profile??s?.profile}),p=i[r];if(!p)throw new m(`Profile '${r}' could not be found in shared credentials file.`,!1);else if(!p.sso_session)throw new m(`Profile '${r}' is missing required property 'sso_session'.`);let c=p.sso_session,l=(await I(o))[c];if(!l)throw new m(`Sso session '${c}' could not be found in shared credentials file.`,!1);for(let n of["sso_start_url","sso_region"])if(!l[n])throw new m(`Sso session '${c}' is missing required property '${n}'.`,!1);let{sso_start_url:d,sso_region:t}=l,f;try{f=await N(c)}catch(n){throw new m(`The SSO session token associated with profile=${r} was not found or is invalid. ${u}`,!1)}w("accessToken",f.accessToken),w("expiresAt",f.expiresAt);let{accessToken:k,expiresAt:T}=f,S={token:k,expiration:new Date(T)};if(S.expiration.getTime()-Date.now()>b)return S;if(Date.now()-j.getTime()<30000)return P(S),S;w("clientId",f.clientId,!0),w("clientSecret",f.clientSecret,!0),w("refreshToken",f.refreshToken,!0);try{j.setTime(Date.now());let n=await U(f,t,o);w("accessToken",n.accessToken),w("expiresIn",n.expiresIn);let h=new Date(Date.now()+n.expiresIn*1000);try{await W(c,{...f,accessToken:n.accessToken,expiresAt:h.toISOString(),refreshToken:n.refreshToken})}catch(g){}return{token:n.accessToken,expiration:h}}catch(n){return P(S),S}};var E=!1,$=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:o,ssoRegion:i,ssoRoleName:r,ssoClient:p,clientConfig:c,parentClientConfig:x,profile:l,logger:d})=>{let t,f="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{let _=await X({profile:l})();t={accessToken:_.token,expiresAt:new Date(_.expiration).toISOString()}}catch(_){throw new a(_.message,{tryNextLink:E,logger:d})}else try{t=await N(e)}catch(_){throw new a("The SSO session associated with this profile is invalid. To refresh this SSO session run aws sso login with the corresponding profile.",{tryNextLink:E,logger:d})}if(new Date(t.expiresAt).getTime()-Date.now()<=0)throw new a("The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile.",{tryNextLink:E,logger:d});let{accessToken:k}=t,{SSOClient:T,GetRoleCredentialsCommand:S}=await import("./chunk-n4tjnbth.js"),n=p||new T(Object.assign({},c??{},{logger:c?.logger??x?.logger,region:c?.region??i})),h;try{h=await n.send(new S({accountId:o,roleName:r,accessToken:k}))}catch(_){throw new a(_,{tryNextLink:E,logger:d})}let{roleCredentials:{accessKeyId:g,secretAccessKey:y,sessionToken:F,expiration:L,credentialScope:M,accountId:G}={}}=h;if(!g||!y||!F||!L)throw new a("SSO returns an invalid temporary credential.",{tryNextLink:E,logger:d});let v={accessKeyId:g,secretAccessKey:y,sessionToken:F,expiration:new Date(L),...M&&{credentialScope:M},...G&&{accountId:G}};if(s)D.setCredentialFeature(v,"CREDENTIALS_SSO","s");else D.setCredentialFeature(v,"CREDENTIALS_SSO_LEGACY","u");return v};var z=(e,s)=>{let{sso_start_url:o,sso_account_id:i,sso_region:r,sso_role_name:p}=e;if(!o||!i||!r||!p)throw new a(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e};var ve=(e={})=>async({callerClientConfig:s}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:o,ssoAccountId:i,ssoRegion:r,ssoRoleName:p,ssoSession:c}=e,{ssoClient:x}=e,l=C({profile:e.profile??s?.profile});if(!o&&!i&&!r&&!p&&!c){let t=(await R(e))[l];if(!t)throw new a(`Profile ${l} was not found.`,{logger:e.logger});if(!K(t))throw new a(`Profile ${l} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let g=(await I(e))[t.sso_session],y=` configurations in profile ${l} and sso-session ${t.sso_session}`;if(r&&r!==g.sso_region)throw new a("Conflicting SSO region"+y,{tryNextLink:!1,logger:e.logger});if(o&&o!==g.sso_start_url)throw new a("Conflicting SSO start_url"+y,{tryNextLink:!1,logger:e.logger});t.sso_region=g.sso_region,t.sso_start_url=g.sso_start_url}let{sso_start_url:f,sso_account_id:k,sso_region:T,sso_role_name:S,sso_session:n}=z(t,e.logger);return $({ssoStartUrl:f,ssoSession:n,ssoAccountId:k,ssoRegion:T,ssoRoleName:S,ssoClient:x,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:l})}else if(!o||!i||!r||!p)throw new a('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});else return $({ssoStartUrl:o,ssoSession:c,ssoAccountId:i,ssoRegion:r,ssoRoleName:p,ssoClient:x,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:l})};export{z as validateSsoProfile,K as isSsoProfile,ve as fromSSO};
