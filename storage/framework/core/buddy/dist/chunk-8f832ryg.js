// @bun
import{Td as E,Zd as m}from"./chunk-eq3zhwy6.js";import"./chunk-p9k8vjq3.js";import{de as O,fe as Q}from"./chunk-g1bcjaf8.js";import{ie as j}from"./chunk-thj9jz4j.js";import{ke as k,pe as C}from"./chunk-9ph3hk3r.js";var $=k(j(),1);var T=k(j(),1);var U=(y,w,_)=>{let I={EcsContainer:async(b)=>{let{fromHttp:x}=await import("./chunk-34mg41zn.js"),{fromContainerMetadata:A}=await import("./chunk-td3wp0es.js");return _?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>Q(x(b??{}),A(b))().then(R)},Ec2InstanceMetadata:async(b)=>{_?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:x}=await import("./chunk-td3wp0es.js");return async()=>x(b)().then(R)},Environment:async(b)=>{_?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:x}=await import("./chunk-5ydykf36.js");return async()=>x(b)().then(R)}};if(y in I)return I[y];else throw new O(`Unsupported credential source in profile ${w}. Got ${y}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:_})},R=(y)=>T.setCredentialFeature(y,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p");var W=(y,{profile:w="default",logger:_}={})=>{return Boolean(y)&&typeof y==="object"&&typeof y.role_arn==="string"&&["undefined","string"].indexOf(typeof y.role_session_name)>-1&&["undefined","string"].indexOf(typeof y.external_id)>-1&&["undefined","string"].indexOf(typeof y.mfa_serial)>-1&&(P(y,{profile:w,logger:_})||N(y,{profile:w,logger:_}))},P=(y,{profile:w,logger:_})=>{let I=typeof y.source_profile==="string"&&typeof y.credential_source==="undefined";if(I)_?.debug?.(`    ${w} isAssumeRoleWithSourceProfile source_profile=${y.source_profile}`);return I},N=(y,{profile:w,logger:_})=>{let I=typeof y.credential_source==="string"&&typeof y.source_profile==="undefined";if(I)_?.debug?.(`    ${w} isCredentialSourceProfile credential_source=${y.credential_source}`);return I},X=async(y,w,_,I={})=>{_.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let b=w[y],{source_profile:x,region:A}=b;if(!_.roleAssumer){let{getDefaultRoleAssumer:K}=await import("./chunk-qy33zck4.js");_.roleAssumer=K({..._.clientConfig,credentialProviderLogger:_.logger,parentClientConfig:{..._?.parentClientConfig,region:A??_?.parentClientConfig?.region}},_.clientPlugins)}if(x&&x in I)throw new O(`Detected a cycle attempting to resolve credentials for profile ${E(_)}. Profiles visited: `+Object.keys(I).join(", "),{logger:_.logger});_.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${x?`source_profile=[${x}]`:`profile=[${y}]`}`);let J=x?L(x,w,_,{...I,[x]:!0},V(w[x]??{})):(await U(b.credential_source,y,_.logger)(_))();if(V(b))return J.then((K)=>$.setCredentialFeature(K,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));else{let K={RoleArn:b.role_arn,RoleSessionName:b.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:b.external_id,DurationSeconds:parseInt(b.duration_seconds||"3600",10)},{mfa_serial:B}=b;if(B){if(!_.mfaCodeProvider)throw new O(`Profile ${y} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:_.logger,tryNextLink:!1});K.SerialNumber=B,K.TokenCode=await _.mfaCodeProvider(B)}let u=await J;return _.roleAssumer(u,K).then((v)=>$.setCredentialFeature(v,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},V=(y)=>{return!y.role_arn&&!!y.credential_source};var Y=k(j(),1),Z=(y)=>Boolean(y)&&typeof y==="object"&&typeof y.credential_process==="string",H=async(y,w)=>import("./chunk-gwrasmf4.js").then(({fromProcess:_})=>_({...y,profile:w})().then((I)=>Y.setCredentialFeature(I,"CREDENTIALS_PROFILE_PROCESS","v")));var q=k(j(),1),c=async(y,w,_={})=>{let{fromSSO:I}=await import("./chunk-nzakck21.js");return I({profile:y,logger:_.logger,parentClientConfig:_.parentClientConfig,clientConfig:_.clientConfig})().then((b)=>{if(w.sso_session)return q.setCredentialFeature(b,"CREDENTIALS_PROFILE_SSO","r");else return q.setCredentialFeature(b,"CREDENTIALS_PROFILE_SSO_LEGACY","t")})},S=(y)=>y&&(typeof y.sso_start_url==="string"||typeof y.sso_account_id==="string"||typeof y.sso_session==="string"||typeof y.sso_region==="string"||typeof y.sso_role_name==="string");var F=k(j(),1),z=(y)=>Boolean(y)&&typeof y==="object"&&typeof y.aws_access_key_id==="string"&&typeof y.aws_secret_access_key==="string"&&["undefined","string"].indexOf(typeof y.aws_session_token)>-1&&["undefined","string"].indexOf(typeof y.aws_account_id)>-1,G=async(y,w)=>{w?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let _={accessKeyId:y.aws_access_key_id,secretAccessKey:y.aws_secret_access_key,sessionToken:y.aws_session_token,...y.aws_credential_scope&&{credentialScope:y.aws_credential_scope},...y.aws_account_id&&{accountId:y.aws_account_id}};return F.setCredentialFeature(_,"CREDENTIALS_PROFILE","n")};var M=k(j(),1),h=(y)=>Boolean(y)&&typeof y==="object"&&typeof y.web_identity_token_file==="string"&&typeof y.role_arn==="string"&&["undefined","string"].indexOf(typeof y.role_session_name)>-1,D=async(y,w)=>import("./chunk-q9gcp883.js").then(({fromTokenFile:_})=>_({webIdentityTokenFile:y.web_identity_token_file,roleArn:y.role_arn,roleSessionName:y.role_session_name,roleAssumerWithWebIdentity:w.roleAssumerWithWebIdentity,logger:w.logger,parentClientConfig:w.parentClientConfig})().then((I)=>M.setCredentialFeature(I,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q")));var L=async(y,w,_,I={},b=!1)=>{let x=w[y];if(Object.keys(I).length>0&&z(x))return G(x,_);if(b||W(x,{profile:y,logger:_.logger}))return X(y,w,_,I);if(z(x))return G(x,_);if(h(x))return D(x,_);if(Z(x))return H(_,y);if(S(x))return await c(y,x,_);throw new O(`Could not resolve credentials using profile: [${y}] in configuration/credentials file(s).`,{logger:_.logger})};var Cy=(y={})=>async({callerClientConfig:w}={})=>{let _={...y,parentClientConfig:{...w,...y.parentClientConfig}};_.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let I=await m(_);return L(E({profile:y.profile??w?.profile}),I,_)};export{Cy as fromIni};
