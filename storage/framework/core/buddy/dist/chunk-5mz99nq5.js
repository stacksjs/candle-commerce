// @bun
import{Od as A,Ud as E}from"./chunk-0gcz8bd6.js";import"./chunk-jpw6wb6x.js";import{Zd as K}from"./chunk-5b5bjkxb.js";import{_d as T}from"./chunk-mp45a05d.js";import{ae as w}from"./chunk-1krazvx7.js";var o=w(T(),1);import{exec as y}from"child_process";import{promisify as I}from"util";var S=w(K(),1),x=(c,n,e)=>{if(n.Version!==1)throw Error(`Profile ${c} credential_process did not return Version 1.`);if(n.AccessKeyId===void 0||n.SecretAccessKey===void 0)throw Error(`Profile ${c} credential_process returned invalid credentials.`);if(n.Expiration){let i=new Date;if(new Date(n.Expiration)<i)throw Error(`Profile ${c} credential_process returned expired credentials.`)}let s=n.AccountId;if(!s&&e?.[c]?.aws_account_id)s=e[c].aws_account_id;let t={accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,...n.SessionToken&&{sessionToken:n.SessionToken},...n.Expiration&&{expiration:new Date(n.Expiration)},...n.CredentialScope&&{credentialScope:n.CredentialScope},...s&&{accountId:s}};return S.setCredentialFeature(t,"CREDENTIALS_PROCESS","w"),t};var _=async(c,n,e)=>{let s=n[c];if(n[c]){let t=s.credential_process;if(t!==void 0){let i=I(y);try{let{stdout:r}=await i(t),u;try{u=JSON.parse(r.trim())}catch{throw Error(`Profile ${c} credential_process returned invalid JSON.`)}return x(c,u,n)}catch(r){throw new o.CredentialsProviderError(r.message,{logger:e})}}else throw new o.CredentialsProviderError(`Profile ${c} did not contain credential_process.`,{logger:e})}else throw new o.CredentialsProviderError(`Profile ${c} could not be found in shared credentials file.`,{logger:e})};var F=(c={})=>async({callerClientConfig:n}={})=>{c.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");let e=await E(c);return _(A({profile:c.profile??n?.profile}),e,c.logger)};export{F as fromProcess};
