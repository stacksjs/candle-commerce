// @bun
import{notNullish as F}from"@stacksjs/utils";import{isObject as G}from"@stacksjs/validation";function L(q,x){return Object.fromEntries(Object.entries(q).map(([A,z])=>x(A,z)).filter(F))}function P(q,x){return x in q}function H(q){return Object.keys(q)}function Q(q){return Object.entries(q)}function E(q,...x){if(!x.length)return q;let A=x.shift();if(A===void 0)return q;if(C(q)&&C(A))H(A).forEach((z)=>{if(C(A[z])){if(!q[z])q[z]={};E(q[z],A[z])}else q[z]=A[z]});return E(q,...x)}function C(q){return G(q)&&!Array.isArray(q)}function R(q,x,A=!1){return x.reduce((z,B)=>{if(B in q){if(!A||q[B]!==void 0)z[B]=q[B]}return z},{})}function S(q){return Object.keys(q).forEach((x)=>q[x]===void 0&&delete q[x]),q}function T(q,x){return q==null?!1:Object.prototype.hasOwnProperty.call(q,x)}export{R as objectPick,L as objectMap,H as objectKeys,Q as objectEntries,P as isKeyOf,T as hasOwnProperty,E as deepMerge,S as clearUndefined};
