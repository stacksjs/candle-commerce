{"version":3,"file":"index.js","names":["modelValue","width","plugin: Plugin"],"sources":["../src/components/Dialog.vue","../src/components/Dialog.vue","../src/components/DialogPanel.vue","../src/components/DialogPanel.vue","../src/index.ts"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { onMounted, onUnmounted, ref, watch, nextTick } from 'vue'\n\nconst props = defineProps<{\n  modelValue: boolean\n  width?: number\n}>()\n\nconst emit = defineEmits<{\n  (event: 'update:modelValue', value: boolean): void\n  (event: 'close', visible: boolean): void\n}>()\n\nconst dialogRef = ref<HTMLElement | null>(null)\nconst previousActiveElement = ref<HTMLElement | null>(null)\n\nfunction handleClose() {\n  emit('update:modelValue', false)\n  emit('close', false)\n}\n\nfunction handleEscape(event: KeyboardEvent) {\n  if (event.key === 'Escape') {\n    handleClose()\n  }\n}\n\nfunction trapFocus(event: KeyboardEvent) {\n  if (event.key !== 'Tab') return\n\n  const focusableElements = dialogRef.value?.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  )\n\n  if (!focusableElements?.length) return\n\n  const firstFocusable = focusableElements[0] as HTMLElement\n  const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement\n\n  if (event.shiftKey) {\n    if (document.activeElement === firstFocusable) {\n      lastFocusable.focus()\n    }\n  } else {\n    if (document.activeElement === lastFocusable) {\n      firstFocusable.focus()\n    }\n  }\n}\n\nwatch(() => props.modelValue, (newValue) => {\n  if (newValue) {\n    previousActiveElement.value = document.activeElement as HTMLElement\n    nextTick(() => {\n      dialogRef.value?.focus()\n    })\n  } else if (previousActiveElement.value) {\n    previousActiveElement.value.focus()\n  }\n})\n\nonMounted(() => {\n  window.addEventListener('keydown', handleEscape)\n  window.addEventListener('keydown', trapFocus)\n})\n\nonUnmounted(() => {\n  window.removeEventListener('keydown', handleEscape)\n  window.removeEventListener('keydown', trapFocus)\n})\n</script>\n\n<template>\n  <Transition name=\"dialog-fade\">\n    <div v-if=\"modelValue\" class=\"stacks-dialog-container\">\n     \n      <div\n        class=\"stacks-dialog-backdrop\"\n        @click.self=\"handleClose\"\n      >\n        <div class=\"stacks-dialog-content\"\n          :style=\"{ 'max-width': width ? `${width}rem` : '30rem' }\"\n        >\n          <button class=\"stacks-dialog-close\" @click=\"handleClose\" aria-label=\"Close dialog\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n          <slot />\n        </div>\n      </div>\n    </div>\n  </Transition>\n</template>\n\n<style scoped>\n.stacks-dialog-container {\n  position: fixed !important;\n  inset: 0 !important;\n  z-index: 50 !important;\n  min-height: 100% !important;\n  overflow-y: auto !important;\n}\n\n.stacks-dialog-backdrop {\n  position: fixed !important;\n  inset: 0 !important;\n  z-index: 20 !important;\n  display: flex !important;\n  align-items: flex-end !important;\n  justify-content: center !important;\n  min-height: 100% !important;\n  padding: 1rem !important;\n  text-align: center !important;\n  transition-property: opacity !important;\n  background-color: rgb(107 114 128 / 0.75) !important;\n}\n\n.stacks-dialog-content {\n  position: relative !important;\n  width: 100% !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  background-color: white !important;\n  border-radius: 0.5rem !important;\n  padding: 1.5rem !important;\n  margin: 1rem !important;\n}\n\n.stacks-dialog-close {\n  position: absolute !important;\n  top: 1rem !important;\n  right: 1rem !important;\n  width: 2rem !important;\n  height: 2rem !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  border-radius: 9999px !important;\n  background-color: white !important;\n  border: 1px solid rgb(229 231 235) !important;\n  color: rgb(107 114 128) !important;\n  cursor: pointer !important;\n  transition: background-color 0.2s ease !important;\n  padding: 0.25rem !important;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1) !important;\n  z-index: 30 !important;\n}\n\n.stacks-dialog-close svg {\n  width: 1.25rem !important;\n  height: 1.25rem !important;\n}\n\n.stacks-dialog-close:hover {\n  background-color: rgb(229 231 235) !important;\n}\n\n@media (min-width: 640px) {\n  .stacks-dialog-backdrop {\n    align-items: center !important;\n    padding: 0 !important;\n  }\n}\n\n.dialog-fade-enter-active,\n.dialog-fade-leave-active {\n  transition: opacity 0.3s ease !important;\n}\n\n.dialog-fade-enter-from,\n.dialog-fade-leave-to {\n  opacity: 0 !important;\n}\n</style>\n","<script lang=\"ts\" setup>\nimport { onMounted, onUnmounted, ref, watch, nextTick } from 'vue'\n\nconst props = defineProps<{\n  modelValue: boolean\n  width?: number\n}>()\n\nconst emit = defineEmits<{\n  (event: 'update:modelValue', value: boolean): void\n  (event: 'close', visible: boolean): void\n}>()\n\nconst dialogRef = ref<HTMLElement | null>(null)\nconst previousActiveElement = ref<HTMLElement | null>(null)\n\nfunction handleClose() {\n  emit('update:modelValue', false)\n  emit('close', false)\n}\n\nfunction handleEscape(event: KeyboardEvent) {\n  if (event.key === 'Escape') {\n    handleClose()\n  }\n}\n\nfunction trapFocus(event: KeyboardEvent) {\n  if (event.key !== 'Tab') return\n\n  const focusableElements = dialogRef.value?.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  )\n\n  if (!focusableElements?.length) return\n\n  const firstFocusable = focusableElements[0] as HTMLElement\n  const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement\n\n  if (event.shiftKey) {\n    if (document.activeElement === firstFocusable) {\n      lastFocusable.focus()\n    }\n  } else {\n    if (document.activeElement === lastFocusable) {\n      firstFocusable.focus()\n    }\n  }\n}\n\nwatch(() => props.modelValue, (newValue) => {\n  if (newValue) {\n    previousActiveElement.value = document.activeElement as HTMLElement\n    nextTick(() => {\n      dialogRef.value?.focus()\n    })\n  } else if (previousActiveElement.value) {\n    previousActiveElement.value.focus()\n  }\n})\n\nonMounted(() => {\n  window.addEventListener('keydown', handleEscape)\n  window.addEventListener('keydown', trapFocus)\n})\n\nonUnmounted(() => {\n  window.removeEventListener('keydown', handleEscape)\n  window.removeEventListener('keydown', trapFocus)\n})\n</script>\n\n<template>\n  <Transition name=\"dialog-fade\">\n    <div v-if=\"modelValue\" class=\"stacks-dialog-container\">\n     \n      <div\n        class=\"stacks-dialog-backdrop\"\n        @click.self=\"handleClose\"\n      >\n        <div class=\"stacks-dialog-content\"\n          :style=\"{ 'max-width': width ? `${width}rem` : '30rem' }\"\n        >\n          <button class=\"stacks-dialog-close\" @click=\"handleClose\" aria-label=\"Close dialog\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n          <slot />\n        </div>\n      </div>\n    </div>\n  </Transition>\n</template>\n\n<style scoped>\n.stacks-dialog-container {\n  position: fixed !important;\n  inset: 0 !important;\n  z-index: 50 !important;\n  min-height: 100% !important;\n  overflow-y: auto !important;\n}\n\n.stacks-dialog-backdrop {\n  position: fixed !important;\n  inset: 0 !important;\n  z-index: 20 !important;\n  display: flex !important;\n  align-items: flex-end !important;\n  justify-content: center !important;\n  min-height: 100% !important;\n  padding: 1rem !important;\n  text-align: center !important;\n  transition-property: opacity !important;\n  background-color: rgb(107 114 128 / 0.75) !important;\n}\n\n.stacks-dialog-content {\n  position: relative !important;\n  width: 100% !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  background-color: white !important;\n  border-radius: 0.5rem !important;\n  padding: 1.5rem !important;\n  margin: 1rem !important;\n}\n\n.stacks-dialog-close {\n  position: absolute !important;\n  top: 1rem !important;\n  right: 1rem !important;\n  width: 2rem !important;\n  height: 2rem !important;\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  border-radius: 9999px !important;\n  background-color: white !important;\n  border: 1px solid rgb(229 231 235) !important;\n  color: rgb(107 114 128) !important;\n  cursor: pointer !important;\n  transition: background-color 0.2s ease !important;\n  padding: 0.25rem !important;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1) !important;\n  z-index: 30 !important;\n}\n\n.stacks-dialog-close svg {\n  width: 1.25rem !important;\n  height: 1.25rem !important;\n}\n\n.stacks-dialog-close:hover {\n  background-color: rgb(229 231 235) !important;\n}\n\n@media (min-width: 640px) {\n  .stacks-dialog-backdrop {\n    align-items: center !important;\n    padding: 0 !important;\n  }\n}\n\n.dialog-fade-enter-active,\n.dialog-fade-leave-active {\n  transition: opacity 0.3s ease !important;\n}\n\n.dialog-fade-enter-from,\n.dialog-fade-leave-to {\n  opacity: 0 !important;\n}\n</style>\n","<script setup lang=\"ts\">\nconst props = defineProps<{\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"props.class\" @click.stop>\n    <slot>\n      <p>Default modal content goes here.</p>\n    </slot>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nconst props = defineProps<{\n  class?: string\n}>()\n</script>\n\n<template>\n  <div :class=\"props.class\" @click.stop>\n    <slot>\n      <p>Default modal content goes here.</p>\n    </slot>\n  </div>\n</template>\n","import type { Plugin } from 'vue'\nimport Dialog from './components/Dialog.vue'\nimport DialogPanel from './components/DialogPanel.vue'\n\nconst plugin: Plugin = {\n  install(app) {\n    app.component('Dialog', Dialog)\n    app.component('DialogPanel', DialogPanel)\n  },\n}\n\nexport { Dialog, DialogPanel }\nexport default plugin\n"],"mappings":""}